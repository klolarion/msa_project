# 1. NGINX가 사용할 프로세스 개수 설정 (자동 조정).
worker_processes auto;

# 2. 이벤트 처리 설정 (최대 1024개의 연결을 지원).
events {
    worker_connections 1024;
}

http {
    # --------- Redis 연동을 통한 Rate Limiting 설정 ---------
    lua_shared_dict rate_limit 10m;  # NGINX와 Redis 간 공유 메모리 공간 정의

    # --------- 서버 그룹 설정 (업스트림) ---------
    upstream auth_server {
        server auth_server:8080;  # 인증 서버 컨테이너 이름 사용
    }

    upstream business_server {
        server business_server:8081;  # 비즈니스 서버 컨테이너 이름 사용
    }

    upstream payment_server {
        server payment_server:8082;  # 결제 서버 컨테이너 이름 사용
    }

    upstream ai_server {
        server ai_server:8083;  # AI 서버 컨테이너 이름 사용
    }

    # --------- NGINX가 수신할 요청에 대한 서버 설정 ---------
    server {
        listen 80;  # NGINX가 수신할 포트 설정

        # CORS 설정 (프로덕션에서는 특정 도메인만 허용)
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";

        # --------- /auth/ 경로 (인증 서버로 프록시) ---------
        location /auth/ {
            proxy_pass http://auth_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- /business/ 경로 (비즈니스 서버로 프록시) ---------
        location /business/ {
            proxy_pass http://business_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- /payments/ 경로 (결제 서버로 프록시) ---------
        location /payments/ {
            proxy_pass http://payment_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- /ai/ 경로 (AI 서버로 프록시) ---------
        location /ai/ {
            proxy_pass http://ai_server/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- Redis와 연동된 Rate Limiting 설정 ---------
        location / {
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)  -- Redis 연결 타임아웃 (1초)

                -- Redis 서버에 연결 (컨테이너 이름 사용)
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    ngx.exit(500)
                end

                -- 클라이언트 IP를 기준으로 요청 수 추적
                local ip = ngx.var.remote_addr
                local key = "rate_limit:" .. ip
                local req_count, err = red:incr(key)

                -- 첫 요청인 경우 TTL(10초) 설정
                if req_count == 1 then
                    red:expire(key, 10)
                end

                -- 요청이 10회를 초과하면 429 에러 반환
                if req_count > 10 then
                    ngx.exit(429)
                end
            }

            # 기본 경로 설정 (필요 시 수정)
            proxy_pass http://127.0.0.1;
        }
    }
}
