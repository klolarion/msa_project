# NGINX가 사용할 프로세스 개수를 설정 (자동 조정).
worker_processes auto;

# 이벤트 처리 설정 (최대 1024개의 연결을 지원).
events {
    worker_connections 1024;
}

http {
    # --------- Redis 연동을 통한 Rate Limiting 설정 ---------

    # lua_shared_dict는 Redis와 NGINX 간 공유 메모리 공간을 생성합니다 (10MB 크기).
    lua_shared_dict rate_limit 10m;

    # Redis가 연결할 각 서버를 그룹으로 정의합니다.
    upstream auth_server {
        server 127.0.0.1:8080;  # 인증 서버
    }

    upstream business_server {
        server 127.0.0.1:8081;  # 비즈니스 서버
    }

    upstream payment_server {
        server 127.0.0.1:8082;  # 결제 서버
    }

    upstream ai_server {
        server 127.0.0.1:8083;  # AI 서버
    }

    # --------- NGINX가 수신할 요청에 대한 서버 설정 ---------
    server {
        # NGINX가 요청을 수신할 포트 (80번 포트).
        listen 80;

        # 모든 도메인에서의 접근을 허용합니다. (CORS 설정)
        # 프로덕션 환경에서는 특정 도메인만 허용하도록 수정하는 것이 좋습니다.
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type";

        # --------- /auth/ 경로에 대한 설정 (인증 서버로 프록시) ---------
        location /auth/ {
            # 요청을 인증 서버로 프록시합니다 (127.0.0.1:8080). -> 위에서 설정한 경로와 포트가 들어감.
            proxy_pass http://auth_server/;

            # 클라이언트 요청 헤더를 백엔드 서버로 전달합니다.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;  # 실제 클라이언트 IP 전달
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 프록시된 IP 목록
            proxy_set_header Authorization $http_authorization;  # 인증 헤더 전달
        }

        # --------- /business/ 경로에 대한 설정 (비즈니스 서버로 프록시) ---------
        location /business/ {
            # 비즈니스 서버로 요청 전달 (127.0.0.1:8081).
            proxy_pass http://business_server/;

            # 동일한 헤더 전달 설정.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- /payments/ 경로에 대한 설정 (결제 서버로 프록시) ---------
        location /payments/ {
            # 결제 서버로 요청 전달 (127.0.0.1:8082).
            proxy_pass http://payment_server/;

            # 동일한 헤더 전달 설정.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- /ai/ 경로에 대한 설정 (AI 서버로 프록시) ---------
        location /ai/ {
            # AI 서버로 요청 전달 (127.0.0.1:8083).
            proxy_pass http://ai_server/;

            # 동일한 헤더 전달 설정.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization $http_authorization;
        }

        # --------- Redis를 통한 Rate Limiting 설정 ---------
        location / {
            # Lua 스크립트를 사용하여 Redis와 연동된 Rate Limiting을 설정합니다.
            access_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)  # Redis 연결 타임아웃 설정 (1초)

                -- Redis 서버에 연결 (컨테이너 이름 사용)
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
                    ngx.exit(500)  # Redis 연결 실패 시 500 에러 반환
                end

                -- 클라이언트 IP를 기반으로 요청 수를 추적
                local ip = ngx.var.remote_addr
                local key = "rate_limit:" .. ip
                local req_count, err = red:incr(key)

                -- 첫 요청이면 TTL(10초) 설정
                if req_count == 1 then
                    red:expire(key, 10)
                end

                -- 10회 이상의 요청 시 429 에러 반환 (Too Many Requests)
                if req_count > 10 then
                    ngx.exit(429)
                end
            }

            # 기본 프록시 경로로 설정 (필요 시 수정 가능).
            proxy_pass http://127.0.0.1;
        }
    }
}
